// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moonranger_rover.proto

#ifndef PROTOBUF_INCLUDED_moonranger_5frover_2eproto
#define PROTOBUF_INCLUDED_moonranger_5frover_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_moonranger_5frover_2eproto 

namespace protobuf_moonranger_5frover_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_moonranger_5frover_2eproto
namespace moonranger_rover {
class Goal;
class GoalDefaultTypeInternal;
extern GoalDefaultTypeInternal _Goal_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class RotationPose;
class RotationPoseDefaultTypeInternal;
extern RotationPoseDefaultTypeInternal _RotationPose_default_instance_;
class TranslationPose;
class TranslationPoseDefaultTypeInternal;
extern TranslationPoseDefaultTypeInternal _TranslationPose_default_instance_;
}  // namespace moonranger_rover
namespace google {
namespace protobuf {
template<> ::moonranger_rover::Goal* Arena::CreateMaybeMessage<::moonranger_rover::Goal>(Arena*);
template<> ::moonranger_rover::Pose* Arena::CreateMaybeMessage<::moonranger_rover::Pose>(Arena*);
template<> ::moonranger_rover::RotationPose* Arena::CreateMaybeMessage<::moonranger_rover::RotationPose>(Arena*);
template<> ::moonranger_rover::TranslationPose* Arena::CreateMaybeMessage<::moonranger_rover::TranslationPose>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace moonranger_rover {

// ===================================================================

class Goal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:moonranger_rover.Goal) */ {
 public:
  Goal();
  virtual ~Goal();

  Goal(const Goal& from);

  inline Goal& operator=(const Goal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Goal(Goal&& from) noexcept
    : Goal() {
    *this = ::std::move(from);
  }

  inline Goal& operator=(Goal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Goal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Goal* internal_default_instance() {
    return reinterpret_cast<const Goal*>(
               &_Goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Goal* other);
  friend void swap(Goal& a, Goal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Goal* New() const final {
    return CreateMaybeMessage<Goal>(NULL);
  }

  Goal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Goal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Goal& from);
  void MergeFrom(const Goal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_coordinate_m = 1;
  void clear_x_coordinate_m();
  static const int kXCoordinateMFieldNumber = 1;
  float x_coordinate_m() const;
  void set_x_coordinate_m(float value);

  // float y_coordinate_m = 2;
  void clear_y_coordinate_m();
  static const int kYCoordinateMFieldNumber = 2;
  float y_coordinate_m() const;
  void set_y_coordinate_m(float value);

  // float x_rad_m = 3;
  void clear_x_rad_m();
  static const int kXRadMFieldNumber = 3;
  float x_rad_m() const;
  void set_x_rad_m(float value);

  // float y_rad_m = 4;
  void clear_y_rad_m();
  static const int kYRadMFieldNumber = 4;
  float y_rad_m() const;
  void set_y_rad_m(float value);

  // float orientation_rad = 5;
  void clear_orientation_rad();
  static const int kOrientationRadFieldNumber = 5;
  float orientation_rad() const;
  void set_orientation_rad(float value);

  // @@protoc_insertion_point(class_scope:moonranger_rover.Goal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_coordinate_m_;
  float y_coordinate_m_;
  float x_rad_m_;
  float y_rad_m_;
  float orientation_rad_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_moonranger_5frover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TranslationPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:moonranger_rover.TranslationPose) */ {
 public:
  TranslationPose();
  virtual ~TranslationPose();

  TranslationPose(const TranslationPose& from);

  inline TranslationPose& operator=(const TranslationPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TranslationPose(TranslationPose&& from) noexcept
    : TranslationPose() {
    *this = ::std::move(from);
  }

  inline TranslationPose& operator=(TranslationPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TranslationPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranslationPose* internal_default_instance() {
    return reinterpret_cast<const TranslationPose*>(
               &_TranslationPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TranslationPose* other);
  friend void swap(TranslationPose& a, TranslationPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TranslationPose* New() const final {
    return CreateMaybeMessage<TranslationPose>(NULL);
  }

  TranslationPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TranslationPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TranslationPose& from);
  void MergeFrom(const TranslationPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslationPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_m = 1;
  void clear_x_m();
  static const int kXMFieldNumber = 1;
  float x_m() const;
  void set_x_m(float value);

  // float y_m = 2;
  void clear_y_m();
  static const int kYMFieldNumber = 2;
  float y_m() const;
  void set_y_m(float value);

  // float z_m = 3;
  void clear_z_m();
  static const int kZMFieldNumber = 3;
  float z_m() const;
  void set_z_m(float value);

  // @@protoc_insertion_point(class_scope:moonranger_rover.TranslationPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_m_;
  float y_m_;
  float z_m_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_moonranger_5frover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RotationPose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:moonranger_rover.RotationPose) */ {
 public:
  RotationPose();
  virtual ~RotationPose();

  RotationPose(const RotationPose& from);

  inline RotationPose& operator=(const RotationPose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RotationPose(RotationPose&& from) noexcept
    : RotationPose() {
    *this = ::std::move(from);
  }

  inline RotationPose& operator=(RotationPose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RotationPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RotationPose* internal_default_instance() {
    return reinterpret_cast<const RotationPose*>(
               &_RotationPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RotationPose* other);
  friend void swap(RotationPose& a, RotationPose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RotationPose* New() const final {
    return CreateMaybeMessage<RotationPose>(NULL);
  }

  RotationPose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RotationPose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RotationPose& from);
  void MergeFrom(const RotationPose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotationPose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_quat = 1;
  void clear_x_quat();
  static const int kXQuatFieldNumber = 1;
  float x_quat() const;
  void set_x_quat(float value);

  // float y_quat = 2;
  void clear_y_quat();
  static const int kYQuatFieldNumber = 2;
  float y_quat() const;
  void set_y_quat(float value);

  // float z_quat = 3;
  void clear_z_quat();
  static const int kZQuatFieldNumber = 3;
  float z_quat() const;
  void set_z_quat(float value);

  // float w_quat = 4;
  void clear_w_quat();
  static const int kWQuatFieldNumber = 4;
  float w_quat() const;
  void set_w_quat(float value);

  // @@protoc_insertion_point(class_scope:moonranger_rover.RotationPose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_quat_;
  float y_quat_;
  float z_quat_;
  float w_quat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_moonranger_5frover_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:moonranger_rover.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(NULL);
  }

  Pose* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .moonranger_rover.TranslationPose translation = 2;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 2;
  private:
  const ::moonranger_rover::TranslationPose& _internal_translation() const;
  public:
  const ::moonranger_rover::TranslationPose& translation() const;
  ::moonranger_rover::TranslationPose* release_translation();
  ::moonranger_rover::TranslationPose* mutable_translation();
  void set_allocated_translation(::moonranger_rover::TranslationPose* translation);

  // uint64 timestamp_ns = 1;
  void clear_timestamp_ns();
  static const int kTimestampNsFieldNumber = 1;
  ::google::protobuf::uint64 timestamp_ns() const;
  void set_timestamp_ns(::google::protobuf::uint64 value);

  // float x_quat = 5;
  void clear_x_quat();
  static const int kXQuatFieldNumber = 5;
  float x_quat() const;
  void set_x_quat(float value);

  // @@protoc_insertion_point(class_scope:moonranger_rover.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::moonranger_rover::TranslationPose* translation_;
  ::google::protobuf::uint64 timestamp_ns_;
  float x_quat_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_moonranger_5frover_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Goal

// float x_coordinate_m = 1;
inline void Goal::clear_x_coordinate_m() {
  x_coordinate_m_ = 0;
}
inline float Goal::x_coordinate_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Goal.x_coordinate_m)
  return x_coordinate_m_;
}
inline void Goal::set_x_coordinate_m(float value) {
  
  x_coordinate_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Goal.x_coordinate_m)
}

// float y_coordinate_m = 2;
inline void Goal::clear_y_coordinate_m() {
  y_coordinate_m_ = 0;
}
inline float Goal::y_coordinate_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Goal.y_coordinate_m)
  return y_coordinate_m_;
}
inline void Goal::set_y_coordinate_m(float value) {
  
  y_coordinate_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Goal.y_coordinate_m)
}

// float x_rad_m = 3;
inline void Goal::clear_x_rad_m() {
  x_rad_m_ = 0;
}
inline float Goal::x_rad_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Goal.x_rad_m)
  return x_rad_m_;
}
inline void Goal::set_x_rad_m(float value) {
  
  x_rad_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Goal.x_rad_m)
}

// float y_rad_m = 4;
inline void Goal::clear_y_rad_m() {
  y_rad_m_ = 0;
}
inline float Goal::y_rad_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Goal.y_rad_m)
  return y_rad_m_;
}
inline void Goal::set_y_rad_m(float value) {
  
  y_rad_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Goal.y_rad_m)
}

// float orientation_rad = 5;
inline void Goal::clear_orientation_rad() {
  orientation_rad_ = 0;
}
inline float Goal::orientation_rad() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Goal.orientation_rad)
  return orientation_rad_;
}
inline void Goal::set_orientation_rad(float value) {
  
  orientation_rad_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Goal.orientation_rad)
}

// -------------------------------------------------------------------

// TranslationPose

// float x_m = 1;
inline void TranslationPose::clear_x_m() {
  x_m_ = 0;
}
inline float TranslationPose::x_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.TranslationPose.x_m)
  return x_m_;
}
inline void TranslationPose::set_x_m(float value) {
  
  x_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.TranslationPose.x_m)
}

// float y_m = 2;
inline void TranslationPose::clear_y_m() {
  y_m_ = 0;
}
inline float TranslationPose::y_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.TranslationPose.y_m)
  return y_m_;
}
inline void TranslationPose::set_y_m(float value) {
  
  y_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.TranslationPose.y_m)
}

// float z_m = 3;
inline void TranslationPose::clear_z_m() {
  z_m_ = 0;
}
inline float TranslationPose::z_m() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.TranslationPose.z_m)
  return z_m_;
}
inline void TranslationPose::set_z_m(float value) {
  
  z_m_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.TranslationPose.z_m)
}

// -------------------------------------------------------------------

// RotationPose

// float x_quat = 1;
inline void RotationPose::clear_x_quat() {
  x_quat_ = 0;
}
inline float RotationPose::x_quat() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.RotationPose.x_quat)
  return x_quat_;
}
inline void RotationPose::set_x_quat(float value) {
  
  x_quat_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.RotationPose.x_quat)
}

// float y_quat = 2;
inline void RotationPose::clear_y_quat() {
  y_quat_ = 0;
}
inline float RotationPose::y_quat() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.RotationPose.y_quat)
  return y_quat_;
}
inline void RotationPose::set_y_quat(float value) {
  
  y_quat_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.RotationPose.y_quat)
}

// float z_quat = 3;
inline void RotationPose::clear_z_quat() {
  z_quat_ = 0;
}
inline float RotationPose::z_quat() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.RotationPose.z_quat)
  return z_quat_;
}
inline void RotationPose::set_z_quat(float value) {
  
  z_quat_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.RotationPose.z_quat)
}

// float w_quat = 4;
inline void RotationPose::clear_w_quat() {
  w_quat_ = 0;
}
inline float RotationPose::w_quat() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.RotationPose.w_quat)
  return w_quat_;
}
inline void RotationPose::set_w_quat(float value) {
  
  w_quat_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.RotationPose.w_quat)
}

// -------------------------------------------------------------------

// Pose

// uint64 timestamp_ns = 1;
inline void Pose::clear_timestamp_ns() {
  timestamp_ns_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Pose::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Pose.timestamp_ns)
  return timestamp_ns_;
}
inline void Pose::set_timestamp_ns(::google::protobuf::uint64 value) {
  
  timestamp_ns_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Pose.timestamp_ns)
}

// .moonranger_rover.TranslationPose translation = 2;
inline bool Pose::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline void Pose::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) {
    delete translation_;
  }
  translation_ = NULL;
}
inline const ::moonranger_rover::TranslationPose& Pose::_internal_translation() const {
  return *translation_;
}
inline const ::moonranger_rover::TranslationPose& Pose::translation() const {
  const ::moonranger_rover::TranslationPose* p = translation_;
  // @@protoc_insertion_point(field_get:moonranger_rover.Pose.translation)
  return p != NULL ? *p : *reinterpret_cast<const ::moonranger_rover::TranslationPose*>(
      &::moonranger_rover::_TranslationPose_default_instance_);
}
inline ::moonranger_rover::TranslationPose* Pose::release_translation() {
  // @@protoc_insertion_point(field_release:moonranger_rover.Pose.translation)
  
  ::moonranger_rover::TranslationPose* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline ::moonranger_rover::TranslationPose* Pose::mutable_translation() {
  
  if (translation_ == NULL) {
    auto* p = CreateMaybeMessage<::moonranger_rover::TranslationPose>(GetArenaNoVirtual());
    translation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:moonranger_rover.Pose.translation)
  return translation_;
}
inline void Pose::set_allocated_translation(::moonranger_rover::TranslationPose* translation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete translation_;
  }
  if (translation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      translation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    
  } else {
    
  }
  translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:moonranger_rover.Pose.translation)
}

// float x_quat = 5;
inline void Pose::clear_x_quat() {
  x_quat_ = 0;
}
inline float Pose::x_quat() const {
  // @@protoc_insertion_point(field_get:moonranger_rover.Pose.x_quat)
  return x_quat_;
}
inline void Pose::set_x_quat(float value) {
  
  x_quat_ = value;
  // @@protoc_insertion_point(field_set:moonranger_rover.Pose.x_quat)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace moonranger_rover

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_moonranger_5frover_2eproto
